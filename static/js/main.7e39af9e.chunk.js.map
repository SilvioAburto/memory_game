{"version":3,"sources":["MemoryGame/Grid/Grid.jsx","MemoryGame/MemoryGame.jsx","App.js","serviceWorker.js","index.js"],"names":["Grid","props","state","this","col","row","isActive","cellId","onMouseDown","extraClassName","id","className","Component","MemoryGame","grid","mouseIsPressed","nodesPlayed","getInitialGrid","setState","newGrid","getUpdatedGrid","node","push","length","startGame","gameLogic","cols","rows","window","screen","width","i","j","setTimeout","document","getElementById","style","color","console","log","screenSize","visibility","nodeId","gameOver","map","rowIdx","key","nodeIdx","handleMouseDown","onClick","location","reload","currentRow","createNode","randomCells","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","NinePositions","slice","Object","assign","RandomNine","IndexRandom","counter","dict","index","GridPositions","filterNodeNum","nodeArray","Num","filter","el","undefined","newNode","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7e39af9e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Grid.css'\r\n\r\nexport default class Grid extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render(){\r\n        const {\r\n            col,\r\n            row,\r\n            isActive,\r\n            cellId,\r\n            onMouseDown,\r\n          } = this.props;\r\n          const extraClassName =  isActive\r\n            ? 'node-active'\r\n            : '';\r\n          \r\n          //rendering individual node elements\r\n          return (\r\n              <div id={`node-${row}-${col}`} className={`node ${extraClassName}`} onMouseDown = {() => onMouseDown(row,col)}>\r\n                <div className='node-num'>{cellId}</div>\r\n              </div>          \r\n          );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Grid from './Grid/Grid';\r\nimport './MemoryGame.css'\r\n\r\nexport default class MemoryGame extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            grid:[],\r\n            mouseIsPressed:false,\r\n            nodesPlayed:[]\r\n        };\r\n        //this.onMouseDown = this.onMouseDown.bind(this)\r\n        //this.getUpdatedGrid  = this.getUpdatedGrid.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        //getScreenSize();\r\n        const grid = getInitialGrid();\r\n        this.setState({grid});\r\n      }\r\n    \r\n    handleMouseDown(row, col) {\r\n      var _this = this\r\n      const newGrid = getUpdatedGrid(this.state.grid, row, col);\r\n      const node = newGrid[row][col];\r\n      //console.log(this.state.nodesPlayed)\r\n      _this.state.nodesPlayed.push(node.cellId)\r\n      if(_this.state.nodesPlayed.length ===1){\r\n        this.startGame()\r\n        //console.log(\"first play\")\r\n      }\r\n      this.gameLogic(node.cellId);\r\n      this.setState({grid: newGrid,\r\n                    mouseIsPressed: true,\r\n\r\n                  }); //Update the state of the grid when mouse pressed\r\n      //console.log(\"mouse down\" + newGrid[row][col].cellId)\r\n    \r\n    }\r\n\r\n    startGame(){\r\n      //Hide numbers\r\n      let screenSize = window.screen.width;\r\n      var cols;\r\n      var rows;\r\n      if(screenSize <= 800){\r\n        cols =5;\r\n        rows = 8;\r\n      }\r\n      else{\r\n        cols = 10;\r\n        rows = 5;\r\n      }\r\n      const Grid = this.state.grid\r\n      for(var i=0; i < rows; i++){\r\n          for(var j=0; j < cols; j++){\r\n            const node = Grid[i][j]\r\n            setTimeout(() => {\r\n              if(node.isActive === 1){\r\n                document.getElementById(`node-${node.row}-${node.col}`).style.color = 'white';\r\n              }\r\n              console.log(node.isActive)\r\n            }, 10 *i)\r\n            //console.log(Grid[i][j])\r\n          }\r\n      }\r\n    }\r\n\r\n    gameOver(){\r\n      let screenSize = window.screen.width;\r\n      var cols;\r\n      var rows;\r\n\r\n      document.getElementById(`gameOverId`).style.visibility = 'visible';\r\n      if(screenSize <= 800){\r\n        cols =5;\r\n        rows = 8;\r\n      }\r\n      else{\r\n        cols = 10;\r\n        rows = 5;\r\n      }\r\n      const Grid = this.state.grid\r\n      for(var i=0; i < rows; i++){\r\n          for(var j=0; j < cols; j++){\r\n            const node = Grid[i][j]\r\n            setTimeout(() => {\r\n              //console.log(\"changing\")\r\n              //console.log(node.row)\r\n              //console.log(node.col)\r\n              document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-gameover';\r\n            }, 100 *i)\r\n            //console.log(Grid[i][j])\r\n          }\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n  \r\n    gameLogic(nodeId){\r\n      var playedCount = this.state.nodesPlayed.length\r\n      //Since the game will end as soon as the order logic breaks we can use a simple comparisson\r\n      if(playedCount !== nodeId){\r\n        console.log(\"Game Over\")\r\n        this.gameOver()\r\n      }\r\n    }\r\n    render(){\r\n        const {grid} = this.state;\r\n        //const nodesPlayed = this.state;\r\n        return (\r\n            <>\r\n              <div className=\"grid\">\r\n                <div id=\"gameOverId\" className = \"gameOver\">\r\n                  Game Over!\r\n                </div>\r\n                {grid.map((row, rowIdx) => {\r\n                  return (\r\n                    <div key={rowIdx}>\r\n                      {row.map((node, nodeIdx) => {\r\n                        const {row, col,isActive,cellId} = node;\r\n                        return (\r\n                          <Grid\r\n                            key={nodeIdx}\r\n                            col={col}\r\n                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                            row={row}\r\n                            isActive = {isActive}\r\n                            cellId = {cellId}\r\n                            >\r\n                        </Grid>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              <button id =\"play\" onClick= {()=> {window.location.reload();}}>Refresh</button>\r\n            </>\r\n          );\r\n    }\r\n}\r\n\r\n\r\nconst RandomNine = (array) => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n    //temporaryValue & randomIndex are undefined at this point\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        //console.log(randomIndex)\r\n        currentIndex -= 1; //substract 1 from current index\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n        //newArray.push(Object.assign(array[currentIndex], {id:currentIndex}))\r\n    }\r\n\r\n    let NinePositions = array.slice(0,9)\r\n    for(var i=0; i < NinePositions.length; i++){\r\n        Object.assign(NinePositions[i], {id:i+1})\r\n    }\r\n    //Filter the first 9 \r\n    //console.log(NinePositions)\r\n    return NinePositions;\r\n}\r\n\r\nconst GridPositions = () => {\r\n    let IndexRandom = [];\r\n    let screenSize = window.screen.width;\r\n    var cols;\r\n    var rows;\r\n    if(screenSize <= 800){\r\n      cols =5;\r\n      rows = 8;\r\n    }\r\n    else{\r\n      cols = 10;\r\n      rows = 5;\r\n    }\r\n    let counter = 0;\r\n    for(var i=0; i < rows; i++){\r\n        for(var j=0; j < cols; j++){\r\n            counter = counter + 1\r\n            const dict  = {\r\n                index:counter,\r\n                row: i,\r\n                col: j,\r\n                id:0\r\n            }\r\n            IndexRandom.push(dict)\r\n            //console.log(i+\"-\"+j)\r\n        }\r\n    }\r\n    return IndexRandom\r\n}\r\n\r\n//console.log(GridPositions())\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    var cols;\r\n    var rows;\r\n    let screenSize = window.screen.width;\r\n    if(screenSize <= 800){\r\n      cols =5;\r\n      rows = 8;\r\n    }\r\n    else{\r\n      cols = 10;\r\n      rows = 5;\r\n    }\r\n    for (let row = 0; row < rows; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < cols; col++) {\r\n        currentRow.push(createNode(col, row));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    //console.log(\"Initial Grid\")\r\n    //console.log(grid)\r\n    return grid;\r\n  };\r\n\r\n  let randomCells = RandomNine(GridPositions())\r\n\r\n\r\n  const filterNodeNum = (nodeArray, row, col) => {\r\n      let Num = nodeArray.filter(function(el){\r\n          return el.row === row &&\r\n                 el.col === col\r\n      });\r\n      //console.log(Num)\r\n      if(Num === undefined || Num.length === 0){\r\n          return;\r\n      }\r\n      else{\r\n          return Num[0].id\r\n      }\r\n  }\r\n\r\n  //var b = filterNodeNum(randomCells,randomCells[6][\"row\"],randomCells[6][\"col\"])\r\n  //console.log(b)\r\n  const createNode = (col, row) => {\r\n    return {\r\n      col,\r\n      row,\r\n      isActive: (row === randomCells[0][\"row\"]  && col === randomCells[0][\"col\"] ) |\r\n                (row === randomCells[1][\"row\"]  && col === randomCells[1][\"col\"] ) | \r\n                (row === randomCells[2][\"row\"]  && col === randomCells[2][\"col\"] ) |  \r\n                (row === randomCells[3][\"row\"]  && col === randomCells[3][\"col\"] ) | \r\n                (row === randomCells[4][\"row\"]  && col === randomCells[4][\"col\"] ) | \r\n                (row === randomCells[5][\"row\"]  && col === randomCells[5][\"col\"] ) |  \r\n                (row === randomCells[6][\"row\"]  && col === randomCells[6][\"col\"] ) | \r\n                (row === randomCells[7][\"row\"]  && col === randomCells[7][\"col\"] ) | \r\n                (row === randomCells[8][\"row\"]  && col === randomCells[8][\"col\"] ) ,\r\n      cellId: filterNodeNum(randomCells,row,col)\r\n    };\r\n  };\r\n\r\n  const getUpdatedGrid = (grid, row, col) => {\r\n\r\n    const newGrid = grid.slice(); //extract current grid\r\n    const node = newGrid[row][col]; //node attributes when clicked\r\n    const newNode = {\r\n      ...node,\r\n      isActive: !node.isActive, //when a node is clicked set attribute to inactives\r\n    };\r\n    //console.log(newNode)\r\n    newGrid[row][col] = newNode;\r\n    return newGrid; //re-render new grid with updated values\r\n  };\r\n\r\n const getScreenSize = () => {\r\n   console.log(window.screen.width)\r\n   return window.screen.width\r\n   //console.log(\"Screen size is\" + window.screen.width)\r\n }\r\n","import React from 'react';\nimport './App.css'\nimport MemoryGame from './MemoryGame/MemoryGame';\n//import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MemoryGame></MemoryGame>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}